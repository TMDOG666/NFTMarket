{
  "address": "0x7d817aa97b19b08C784F2A1d1f211c33fDE077B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blindBoxListFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "OnlyOwnerOrCoordinator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "BoxCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "BoxPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "roller",
          "type": "address"
        }
      ],
      "name": "BoxPurchasedRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        }
      ],
      "name": "BoxRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "NFTAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "NFTWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "addNFTs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blindBoxListFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boxCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createBox",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        }
      ],
      "name": "purchaseBox",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        }
      ],
      "name": "removeBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract IVRFCoordinatorV2Plus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42c07ad5bba3b9861b737ee8ded1ee877fb8f1a9675d6ecf717383a92e6d5684",
  "receipt": {
    "to": null,
    "from": "0x70b675a7a260F9E4E47eB580ae23080F00180F3f",
    "contractAddress": "0x7d817aa97b19b08C784F2A1d1f211c33fDE077B1",
    "transactionIndex": 43,
    "gasUsed": "1482871",
    "logsBloom": "0x
    "blockHash": "0xc642a4d26f84dad985c5a0841fe952e86a85b594ab0556d56d4c65c8a13f091f",
    "transactionHash": "0x42c07ad5bba3b9861b737ee8ded1ee877fb8f1a9675d6ecf717383a92e6d5684",
    "logs": [],
    "blockNumber": 7319800,
    "cumulativeGasUsed": "6562917",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "84826624238180177213586267631912933170225440835689132759189973316904218852467",
    "10000000000000000"
  ],
  "numDeployments": 6,
  "solcInputHash": "43c7ceab70f7fe9038c678474b4093b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blindBoxListFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"BoxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BoxPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roller\",\"type\":\"address\"}],\"name\":\"BoxPurchasedRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"BoxRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"NFTAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NFTWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"addNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blindBoxListFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"purchaseBox\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"removeBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlindBox.sol\":\"BlindBox\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BlindBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {VRFConsumerBaseV2Plus} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\\\";\\r\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\r\\n\\r\\n\\r\\ncontract BlindBox is VRFConsumerBaseV2Plus, IERC721Receiver {\\r\\n\\tstruct Box {\\r\\n\\t\\tuint256 price; // \\u76f2\\u76d2\\u4ef7\\u683c\\r\\n\\t\\tuint256[] nftIds; // \\u5305\\u542b\\u7684NFT ID\\u5217\\u8868\\r\\n\\t\\taddress nftContract; // NFT\\u5408\\u7ea6\\u5730\\u5740\\r\\n\\t\\tbool isActive; // \\u76f2\\u76d2\\u662f\\u5426\\u53ef\\u7528\\r\\n\\t}\\r\\n\\r\\n    uint256 public s_subscriptionId;\\r\\n    address public vrfCoordinator = 0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B;\\r\\n    bytes32 public s_keyHash = 0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae;\\r\\n    uint32 public callbackGasLimit = 200000;\\r\\n    uint16 public requestConfirmations = 3;\\r\\n    uint32 public numWords = 1;\\r\\n\\r\\n    constructor(uint256 subscriptionId , uint256 _blindBoxListFee) VRFConsumerBaseV2Plus(vrfCoordinator) {\\r\\n\\t\\tblindBoxListFee = _blindBoxListFee;\\r\\n        s_subscriptionId = subscriptionId;\\r\\n    }\\r\\n\\r\\n\\tuint256 public blindBoxListFee; // \\u76f2\\u76d2\\u5217\\u8868\\u624b\\u7eed\\u8d39\\r\\n\\r\\n\\tuint256 public boxCounter; // \\u76f2\\u76d2\\u8ba1\\u6570\\u5668\\r\\n\\tmapping(uint256 => Box) public boxes; // \\u76f2\\u76d2ID\\u5230\\u76f2\\u76d2\\u8be6\\u60c5\\u7684\\u6620\\u5c04\\r\\n\\r\\n\\tmapping(address => uint256) private userRequestId;\\r\\n    \\r\\n    mapping(uint256 => address) private s_rollers;\\r\\n\\r\\n    mapping(uint256 => uint256) private s_boxIds;\\r\\n\\r\\n\\tevent BoxCreated(uint256 indexed boxId, uint256 price, address nftContract);\\r\\n\\tevent BoxRemoved(uint256 indexed boxId);\\r\\n\\tevent NFTAdded(uint256 indexed boxId, uint256[] nftIds);\\r\\n\\tevent NFTWithdrawn(uint256 indexed boxId, uint256 nftId, address to);\\r\\n\\tevent BoxPurchased(uint256 requestId, uint256 indexed boxId, uint256 nftId, address buyer);\\r\\n    event BoxPurchasedRequest(uint256 indexed requestId, uint256 boxId, address indexed roller);\\r\\n\\r\\n\\t// \\u4e0a\\u67b6\\u76f2\\u76d2\\r\\n\\tfunction createBox(\\r\\n\\t\\taddress nftContract,\\r\\n\\t\\tuint256[] calldata nftIds,\\r\\n\\t\\tuint256 price\\r\\n\\t) external onlyOwner payable{\\r\\n\\t\\trequire(nftContract != address(0), \\\"Invalid NFT contract\\\");\\r\\n\\t\\trequire(nftIds.length > 0, \\\"No NFTs provided\\\");\\r\\n\\r\\n\\t\\tif (msg.sender != owner()){\\r\\n\\t\\t\\trequire(msg.value >= blindBoxListFee, \\\"Insufficient fee\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// \\u521b\\u5efa\\u65b0\\u76f2\\u76d2\\r\\n\\t\\tboxCounter++;\\r\\n\\t\\tuint256 boxId = boxCounter;\\r\\n\\r\\n\\t\\tBox storage box = boxes[boxId];\\r\\n\\t\\tbox.price = price;\\r\\n\\t\\tbox.nftContract = nftContract;\\r\\n\\t\\tbox.isActive = true;\\r\\n\\r\\n\\t\\t// \\u8f6c\\u79fb NFT \\u5230\\u76f2\\u76d2\\u5408\\u7ea6\\r\\n\\t\\tfor (uint256 i = 0; i < nftIds.length; i++) {\\r\\n\\t\\t\\tuint256 nftId = nftIds[i];\\r\\n\\r\\n\\t\\t\\t// \\u68c0\\u67e5\\u662f\\u5426\\u6709\\u8f6c\\u79fb\\u6388\\u6743\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tIERC721(nftContract).getApproved(nftId) == address(this) ||\\r\\n\\t\\t\\t\\t\\tIERC721(nftContract).isApprovedForAll(\\r\\n\\t\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\\"NFT not approved for transfer\\\"\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t// \\u8f6c\\u79fb NFT \\u5230\\u5408\\u7ea6\\r\\n\\t\\t\\tIERC721(nftContract).safeTransferFrom(\\r\\n\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tnftId\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tbox.nftIds.push(nftId);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit BoxCreated(boxId, price, nftContract);\\r\\n\\t}\\r\\n\\r\\n\\t// \\u8865\\u8d27\\r\\n\\tfunction addNFTs(\\r\\n\\t\\tuint256 boxId,\\r\\n\\t\\tuint256[] calldata nftIds\\r\\n\\t) external onlyOwner {\\r\\n\\t\\tBox storage box = boxes[boxId];\\r\\n\\t\\trequire(box.isActive, \\\"Box is not active\\\");\\r\\n\\t\\trequire(nftIds.length > 0, \\\"No NFTs provided\\\");\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < nftIds.length; i++) {\\r\\n\\t\\t\\tIERC721(box.nftContract).safeTransferFrom(\\r\\n\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tnftIds[i]\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tbox.nftIds.push(nftIds[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit NFTAdded(boxId, nftIds);\\r\\n\\t}\\r\\n\\r\\n\\t// \\u4e0b\\u67b6\\u76f2\\u76d2\\r\\n\\tfunction removeBox(uint256 boxId) external onlyOwner {\\r\\n\\t\\tBox storage box = boxes[boxId];\\r\\n\\t\\trequire(box.isActive, \\\"Box is not active\\\");\\r\\n\\r\\n\\t\\t// \\u5c06\\u6240\\u6709NFT\\u8fd4\\u8fd8\\u7ed9\\u6240\\u6709\\u8005\\r\\n\\t\\tfor (uint256 i = 0; i < box.nftIds.length; i++) {\\r\\n\\t\\t\\tuint256 nftId = box.nftIds[i];\\r\\n\\t\\t\\tIERC721(box.nftContract).safeTransferFrom(\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\tnftId\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbox.isActive = false;\\r\\n\\r\\n\\t\\temit BoxRemoved(boxId);\\r\\n\\t}\\r\\n\\r\\n\\t// \\u8d2d\\u4e70\\u76f2\\u76d2\\r\\n\\tfunction purchaseBox(uint256 boxId) external payable returns (uint256 requestId) {\\r\\n\\t    Box storage box = boxes[boxId];\\r\\n\\t    require(box.isActive, \\\"Box is not active\\\");\\r\\n\\t    require(box.nftIds.length > 0, \\\"Box is empty\\\");\\r\\n\\t    require(msg.value >= box.price, \\\"Insufficient payment\\\");\\r\\n\\r\\n\\t    // \\u8bf7\\u6c42\\u968f\\u673a\\u6570\\r\\n\\t    requestId = s_vrfCoordinator.requestRandomWords(\\r\\n\\t        VRFV2PlusClient.RandomWordsRequest({\\r\\n\\t            keyHash: s_keyHash,\\r\\n\\t            subId: s_subscriptionId,\\r\\n\\t            requestConfirmations: requestConfirmations,\\r\\n\\t            callbackGasLimit: callbackGasLimit,\\r\\n\\t            numWords: numWords,\\r\\n\\t            extraArgs: VRFV2PlusClient._argsToBytes(\\r\\n\\t                // Set nativePayment to true to pay for VRF requests with Sepolia ETH instead of LINK\\r\\n\\t                VRFV2PlusClient.ExtraArgsV1({nativePayment: false})\\r\\n\\t            )\\r\\n\\t        })\\r\\n\\t    );\\r\\n\\r\\n\\t    // \\u8bb0\\u5f55\\u8d2d\\u4e70\\u8005\\u548c\\u76f2\\u76d2ID\\uff0c\\u7a0d\\u540e\\u5728 `fulfillRandomWords` \\u4e2d\\u4f7f\\u7528\\r\\n\\t    s_rollers[requestId] = msg.sender;\\r\\n\\t    s_boxIds[requestId] = boxId;\\r\\n\\t\\tuserRequestId[msg.sender] = requestId;\\r\\n\\r\\n\\t    emit BoxPurchasedRequest(requestId, boxId, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t// fulfillRandomWords \\u56de\\u8c03\\u51fd\\u6570\\r\\n\\tfunction fulfillRandomWords(\\r\\n\\t    uint256 requestId,\\r\\n\\t    uint256[] calldata randomWords\\r\\n\\t) internal override {\\r\\n\\t    // \\u83b7\\u53d6\\u76f2\\u76d2ID\\u548c\\u8d2d\\u4e70\\u8005\\u5730\\u5740\\r\\n\\t    address buyer = s_rollers[requestId];\\r\\n\\t    uint256 boxId = s_boxIds[requestId];\\r\\n\\r\\n\\t    Box storage box = boxes[boxId];\\r\\n\\r\\n\\t    // \\u4f7f\\u7528 Chainlink VRF \\u968f\\u673a\\u6570\\u9009\\u62e9\\u4e00\\u4e2aNFT\\r\\n\\t    uint256 randomIndex = randomWords[0] % box.nftIds.length;\\r\\n\\t    uint256 nftId = box.nftIds[randomIndex];\\r\\n\\r\\n\\t    // \\u5c06\\u9009\\u4e2d\\u7684NFT\\u8f6c\\u79fb\\u7ed9\\u8d2d\\u4e70\\u8005\\r\\n\\t    IERC721(box.nftContract).safeTransferFrom(\\r\\n\\t        address(this),\\r\\n\\t        buyer,\\r\\n\\t        nftId\\r\\n\\t    );\\r\\n\\r\\n\\t    // \\u4ece\\u76f2\\u76d2\\u4e2d\\u79fb\\u9664\\u8be5NFT\\r\\n\\t    box.nftIds[randomIndex] = box.nftIds[box.nftIds.length - 1];\\r\\n\\t    box.nftIds.pop();\\r\\n\\r\\n\\t    emit BoxPurchased(requestId, boxId, nftId, buyer);\\r\\n\\t}\\r\\n\\r\\n\\t// \\u83b7\\u53d6\\u7528\\u6237rquestId\\r\\n\\tfunction getRequestId(address user) external view returns (uint256) {\\r\\n\\t\\treturn userRequestId[user];\\r\\n\\t}\\r\\n\\r\\n\\t// \\u5b9e\\u73b0 IERC721Receiver \\u63a5\\u53e3\\r\\n\\tfunction onERC721Received(\\r\\n\\t\\taddress /*operator*/,\\r\\n\\t\\taddress /*from*/,\\r\\n\\t\\tuint256 /*tokenId*/,\\r\\n\\t\\tbytes calldata /*data*/\\r\\n\\t) external pure override returns (bytes4) {\\r\\n\\t\\treturn this.onERC721Received.selector;\\r\\n\\t}\\r\\n\\r\\n\\t// \\u63d0\\u73b0\\u529f\\u80fd\\r\\n\\tfunction withdraw() external onlyOwner {\\r\\n\\t\\tuint256 balanceToWithdraw = address(this).balance;\\r\\n\\t\\trequire(balanceToWithdraw > 0, \\\"No balance to withdraw\\\");\\r\\n\\r\\n\\t\\t// \\u5c06\\u4f59\\u989d\\u8f6c\\u79fb\\u5230\\u5408\\u7ea6\\u7684\\u6240\\u6709\\u8005\\u5730\\u5740\\r\\n\\t\\tpayable(owner()).transfer(balanceToWithdraw);\\r\\n\\t}\\r\\n\\r\\n\\t// \\u67e5\\u8be2\\u5408\\u7ea6\\u4f59\\u989d\\r\\n\\tfunction getContractBalance() external view returns (uint256) {\\r\\n\\t\\treturn address(this).balance;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xa6fcad7ef85cf47d2047b94d188cc02f3d91bfc3f46d9d65ba96df74dafefbed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600480546001600160a01b031916739ddfaca8183c41ad55329bdeed9f6a8d53168b1b1790557f787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae600555600680546601000300030d406001600160501b03199091161790553480156200007657600080fd5b506040516200194738038062001947833981016040819052620000999162000231565b6004546001600160a01b03163380600081620000fc5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156200012f576200012f8162000186565b5050506001600160a01b0381166200015a5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b039290921691909117905560075560035562000256565b336001600160a01b03821603620001e05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000f3565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600080604083850312156200024557600080fd5b505080516020909101519092909150565b6116e180620002666000396000f3fe6080604052600436106101405760003560e01c806359d2817a116100b65780638da5cb5b1161006f5780638da5cb5b146103b75780638ea98117146103e95780639eccacf614610409578063a3e56fa814610429578063b0fb162f14610449578063f2fde38b1461047f57600080fd5b806359d2817a1461031c5780636f9fb98a1461033c57806379ba50971461034f5780637a0dad27146103645780637ccfd7fc1461037a5780638ac00021146103a157600080fd5b806324f746971161010857806324f74697146102285780633ccfd60b1461025a57806345bb327b1461026f5780634eca8894146102855780634ed3faf21461029b578063577c00cd1461030957600080fd5b8063098899c6146101455780630e8e756f1461016b578063150b7a021461018d5780631e612da8146101d25780631fe543e314610208575b600080fd5b6101586101533660046112b4565b61049f565b6040519081526020015b60405180910390f35b34801561017757600080fd5b5061018b610186366004611319565b6106be565b005b34801561019957600080fd5b506101b96101a836600461137a565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610162565b3480156101de57600080fd5b506101586101ed366004611419565b6001600160a01b03166000908152600a602052604090205490565b34801561021457600080fd5b5061018b610223366004611319565b610853565b34801561023457600080fd5b506006546102459063ffffffff1681565b60405163ffffffff9091168152602001610162565b34801561026657600080fd5b5061018b6108a3565b34801561027b57600080fd5b5061015860055481565b34801561029157600080fd5b5061015860075481565b3480156102a757600080fd5b506102e46102b63660046112b4565b600960205260009081526040902080546002909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b039092166020840152151590820152606001610162565b61018b61031736600461143d565b61092f565b34801561032857600080fd5b5061018b6103373660046112b4565b610ca8565b34801561034857600080fd5b5047610158565b34801561035b57600080fd5b5061018b610dd7565b34801561037057600080fd5b5061015860085481565b34801561038657600080fd5b50600654610245906601000000000000900463ffffffff1681565b3480156103ad57600080fd5b5061015860035481565b3480156103c357600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610162565b3480156103f557600080fd5b5061018b610404366004611419565b610e81565b34801561041557600080fd5b506002546103d1906001600160a01b031681565b34801561043557600080fd5b506004546103d1906001600160a01b031681565b34801561045557600080fd5b5060065461046c90640100000000900461ffff1681565b60405161ffff9091168152602001610162565b34801561048b57600080fd5b5061018b61049a366004611419565b610f73565b60008181526009602052604081206002810154600160a01b900460ff166104e15760405162461bcd60e51b81526004016104d890611499565b60405180910390fd5b60018101546105215760405162461bcd60e51b815260206004820152600c60248201526b426f7820697320656d70747960a01b60448201526064016104d8565b80543410156105695760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104d8565b6002546040805160c081018252600554815260035460208083019190915260065461ffff6401000000008204168385015263ffffffff808216606085015266010000000000009091041660808301528251908101909252600082526001600160a01b0390921691639b1c385e9160a08201906105e490610f87565b8152506040518263ffffffff1660e01b815260040161060391906114c4565b6020604051808303816000875af1158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190611560565b6000818152600b6020908152604080832080546001600160a01b03191633908117909155600c8352818420889055808452600a83529281902084905551868152929450909184917f71e1c886cf9c7265f0e0673f1630c945b4c4059a84a3faf3aa7c3814f7c206cc910160405180910390a350919050565b6106c6610ff8565b60008381526009602052604090206002810154600160a01b900460ff166106ff5760405162461bcd60e51b81526004016104d890611499565b8161073f5760405162461bcd60e51b815260206004820152601060248201526f139bc81391951cc81c1c9bdd9a59195960821b60448201526064016104d8565b60005b828110156108125760028201546001600160a01b03166342842e0e333087878681811061077157610771611579565b905060200201356040518463ffffffff1660e01b81526004016107969392919061158f565b600060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b50505050816001018484838181106107de576107de611579565b835460018101855560009485526020948590209190940292909201359190920155508061080a816115c9565b915050610742565b50837f48e28eaeb219b85eeffde4ad6b5a6c4a1b5d015b45b9e7f4fb0280fbd2e1a00c84846040516108459291906115e2565b60405180910390a250505050565b6002546001600160a01b031633146108935760025460405163073e64fd60e21b81523360048201526001600160a01b0390911660248201526044016104d8565b61089e83838361104d565b505050565b6108ab610ff8565b47806108f25760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b60448201526064016104d8565b600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561092b573d6000803e3d6000fd5b5050565b610937610ff8565b6001600160a01b0384166109845760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081391950818dbdb9d1c9858dd60621b60448201526064016104d8565b816109c45760405162461bcd60e51b815260206004820152601060248201526f139bc81391951cc81c1c9bdd9a59195960821b60448201526064016104d8565b6000546001600160a01b03163314610a1b57600754341015610a1b5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b60448201526064016104d8565b60088054906000610a2b836115c9565b909155505060085460008181526009602052604081208381556002810180546001600160a81b0319166001600160a01b03891617600160a01b179055905b84811015610c5c576000868683818110610a8557610a85611579565b905060200201359050306001600160a01b0316886001600160a01b031663081812fc836040518263ffffffff1660e01b8152600401610ac691815260200190565b602060405180830381865afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061161b565b6001600160a01b03161480610b85575060405163e985e9c560e01b81523360048201523060248201526001600160a01b0389169063e985e9c590604401602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b859190611638565b610bd15760405162461bcd60e51b815260206004820152601d60248201527f4e4654206e6f7420617070726f76656420666f72207472616e7366657200000060448201526064016104d8565b604051632142170760e11b81526001600160a01b038916906342842e0e90610c019033903090869060040161158f565b600060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b50505050600183810180549182018155600090815260209020015580610c54816115c9565b915050610a69565b50604080518481526001600160a01b038816602082015283917f686d8371a57249b1d76bd1a89039412b1e01c4517985d858de342f0401f40295910160405180910390a2505050505050565b610cb0610ff8565b60008181526009602052604090206002810154600160a01b900460ff16610ce95760405162461bcd60e51b81526004016104d890611499565b60005b6001820154811015610d98576000826001018281548110610d0f57610d0f611579565b6000918252602090912001546002840154604051632142170760e11b81529192506001600160a01b0316906342842e0e90610d529030903390869060040161158f565b600060405180830381600087803b158015610d6c57600080fd5b505af1158015610d80573d6000803e3d6000fd5b50505050508080610d90906115c9565b915050610cec565b5060028101805460ff60a01b1916905560405182907f39c4075a3427393cc79841c9441c046377afac9c2a2ec2a5ced42f23b127e75890600090a25050565b6001546001600160a01b03163314610e2a5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016104d8565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000546001600160a01b03163314801590610ea757506002546001600160a01b03163314155b15610ef85733610ebf6000546001600160a01b031690565b60025460405163061db9c160e01b81526001600160a01b03938416600482015291831660248301529190911660448201526064016104d8565b6001600160a01b038116610f1f5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be69060200160405180910390a150565b610f7b610ff8565b610f848161120b565b50565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa82604051602401610fc091511515815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b6000546001600160a01b0316331461104b5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016104d8565b565b6000838152600b6020908152604080832054600c835281842054808552600990935290832060018101546001600160a01b039092169390918686838161109557611095611579565b905060200201356110a6919061165a565b905060008260010182815481106110bf576110bf611579565b6000918252602090912001546002840154604051632142170760e11b81529192506001600160a01b0316906342842e0e906111029030908990869060040161158f565b600060405180830381600087803b15801561111c57600080fd5b505af1158015611130573d6000803e3d6000fd5b505050506001838101805490916111469161167c565b8154811061115657611156611579565b906000526020600020015483600101838154811061117657611176611579565b6000918252602090912001556001830180548061119557611195611695565b60019003818190600052602060002001600090559055837fddd95c0fd29204619fa452bc152b20209cec665d50aef28fa3a0e532e9b27f1c8983886040516111f99392919092835260208301919091526001600160a01b0316604082015260600190565b60405180910390a25050505050505050565b336001600160a01b038216036112635760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016104d8565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156112c657600080fd5b5035919050565b60008083601f8401126112df57600080fd5b50813567ffffffffffffffff8111156112f757600080fd5b6020830191508360208260051b850101111561131257600080fd5b9250929050565b60008060006040848603121561132e57600080fd5b83359250602084013567ffffffffffffffff81111561134c57600080fd5b611358868287016112cd565b9497909650939450505050565b6001600160a01b0381168114610f8457600080fd5b60008060008060006080868803121561139257600080fd5b853561139d81611365565b945060208601356113ad81611365565b935060408601359250606086013567ffffffffffffffff808211156113d157600080fd5b818801915088601f8301126113e557600080fd5b8135818111156113f457600080fd5b89602082850101111561140657600080fd5b9699959850939650602001949392505050565b60006020828403121561142b57600080fd5b813561143681611365565b9392505050565b6000806000806060858703121561145357600080fd5b843561145e81611365565b9350602085013567ffffffffffffffff81111561147a57600080fd5b611486878288016112cd565b9598909750949560400135949350505050565b602080825260119082015270426f78206973206e6f742061637469766560781b604082015260600190565b6000602080835283518184015280840151604084015261ffff6040850151166060840152606084015163ffffffff80821660808601528060808701511660a0860152505060a084015160c08085015280518060e086015260005b8181101561153b578281018401518682016101000152830161151e565b506101009250600083828701015282601f19601f830116860101935050505092915050565b60006020828403121561157257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016115db576115db6115b3565b5060010190565b6020808252810182905260006001600160fb1b0383111561160257600080fd5b8260051b80856040850137919091016040019392505050565b60006020828403121561162d57600080fd5b815161143681611365565b60006020828403121561164a57600080fd5b8151801515811461143657600080fd5b60008261167757634e487b7160e01b600052601260045260246000fd5b500690565b8181038181111561168f5761168f6115b3565b92915050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122095001cfecc174906e761beebb1460fc331047566658c45783efe48e0e982694664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806359d2817a116100b65780638da5cb5b1161006f5780638da5cb5b146103b75780638ea98117146103e95780639eccacf614610409578063a3e56fa814610429578063b0fb162f14610449578063f2fde38b1461047f57600080fd5b806359d2817a1461031c5780636f9fb98a1461033c57806379ba50971461034f5780637a0dad27146103645780637ccfd7fc1461037a5780638ac00021146103a157600080fd5b806324f746971161010857806324f74697146102285780633ccfd60b1461025a57806345bb327b1461026f5780634eca8894146102855780634ed3faf21461029b578063577c00cd1461030957600080fd5b8063098899c6146101455780630e8e756f1461016b578063150b7a021461018d5780631e612da8146101d25780631fe543e314610208575b600080fd5b6101586101533660046112b4565b61049f565b6040519081526020015b60405180910390f35b34801561017757600080fd5b5061018b610186366004611319565b6106be565b005b34801561019957600080fd5b506101b96101a836600461137a565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610162565b3480156101de57600080fd5b506101586101ed366004611419565b6001600160a01b03166000908152600a602052604090205490565b34801561021457600080fd5b5061018b610223366004611319565b610853565b34801561023457600080fd5b506006546102459063ffffffff1681565b60405163ffffffff9091168152602001610162565b34801561026657600080fd5b5061018b6108a3565b34801561027b57600080fd5b5061015860055481565b34801561029157600080fd5b5061015860075481565b3480156102a757600080fd5b506102e46102b63660046112b4565b600960205260009081526040902080546002909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b039092166020840152151590820152606001610162565b61018b61031736600461143d565b61092f565b34801561032857600080fd5b5061018b6103373660046112b4565b610ca8565b34801561034857600080fd5b5047610158565b34801561035b57600080fd5b5061018b610dd7565b34801561037057600080fd5b5061015860085481565b34801561038657600080fd5b50600654610245906601000000000000900463ffffffff1681565b3480156103ad57600080fd5b5061015860035481565b3480156103c357600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610162565b3480156103f557600080fd5b5061018b610404366004611419565b610e81565b34801561041557600080fd5b506002546103d1906001600160a01b031681565b34801561043557600080fd5b506004546103d1906001600160a01b031681565b34801561045557600080fd5b5060065461046c90640100000000900461ffff1681565b60405161ffff9091168152602001610162565b34801561048b57600080fd5b5061018b61049a366004611419565b610f73565b60008181526009602052604081206002810154600160a01b900460ff166104e15760405162461bcd60e51b81526004016104d890611499565b60405180910390fd5b60018101546105215760405162461bcd60e51b815260206004820152600c60248201526b426f7820697320656d70747960a01b60448201526064016104d8565b80543410156105695760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104d8565b6002546040805160c081018252600554815260035460208083019190915260065461ffff6401000000008204168385015263ffffffff808216606085015266010000000000009091041660808301528251908101909252600082526001600160a01b0390921691639b1c385e9160a08201906105e490610f87565b8152506040518263ffffffff1660e01b815260040161060391906114c4565b6020604051808303816000875af1158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190611560565b6000818152600b6020908152604080832080546001600160a01b03191633908117909155600c8352818420889055808452600a83529281902084905551868152929450909184917f71e1c886cf9c7265f0e0673f1630c945b4c4059a84a3faf3aa7c3814f7c206cc910160405180910390a350919050565b6106c6610ff8565b60008381526009602052604090206002810154600160a01b900460ff166106ff5760405162461bcd60e51b81526004016104d890611499565b8161073f5760405162461bcd60e51b815260206004820152601060248201526f139bc81391951cc81c1c9bdd9a59195960821b60448201526064016104d8565b60005b828110156108125760028201546001600160a01b03166342842e0e333087878681811061077157610771611579565b905060200201356040518463ffffffff1660e01b81526004016107969392919061158f565b600060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b50505050816001018484838181106107de576107de611579565b835460018101855560009485526020948590209190940292909201359190920155508061080a816115c9565b915050610742565b50837f48e28eaeb219b85eeffde4ad6b5a6c4a1b5d015b45b9e7f4fb0280fbd2e1a00c84846040516108459291906115e2565b60405180910390a250505050565b6002546001600160a01b031633146108935760025460405163073e64fd60e21b81523360048201526001600160a01b0390911660248201526044016104d8565b61089e83838361104d565b505050565b6108ab610ff8565b47806108f25760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b60448201526064016104d8565b600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561092b573d6000803e3d6000fd5b5050565b610937610ff8565b6001600160a01b0384166109845760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081391950818dbdb9d1c9858dd60621b60448201526064016104d8565b816109c45760405162461bcd60e51b815260206004820152601060248201526f139bc81391951cc81c1c9bdd9a59195960821b60448201526064016104d8565b6000546001600160a01b03163314610a1b57600754341015610a1b5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b60448201526064016104d8565b60088054906000610a2b836115c9565b909155505060085460008181526009602052604081208381556002810180546001600160a81b0319166001600160a01b03891617600160a01b179055905b84811015610c5c576000868683818110610a8557610a85611579565b905060200201359050306001600160a01b0316886001600160a01b031663081812fc836040518263ffffffff1660e01b8152600401610ac691815260200190565b602060405180830381865afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061161b565b6001600160a01b03161480610b85575060405163e985e9c560e01b81523360048201523060248201526001600160a01b0389169063e985e9c590604401602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b859190611638565b610bd15760405162461bcd60e51b815260206004820152601d60248201527f4e4654206e6f7420617070726f76656420666f72207472616e7366657200000060448201526064016104d8565b604051632142170760e11b81526001600160a01b038916906342842e0e90610c019033903090869060040161158f565b600060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b50505050600183810180549182018155600090815260209020015580610c54816115c9565b915050610a69565b50604080518481526001600160a01b038816602082015283917f686d8371a57249b1d76bd1a89039412b1e01c4517985d858de342f0401f40295910160405180910390a2505050505050565b610cb0610ff8565b60008181526009602052604090206002810154600160a01b900460ff16610ce95760405162461bcd60e51b81526004016104d890611499565b60005b6001820154811015610d98576000826001018281548110610d0f57610d0f611579565b6000918252602090912001546002840154604051632142170760e11b81529192506001600160a01b0316906342842e0e90610d529030903390869060040161158f565b600060405180830381600087803b158015610d6c57600080fd5b505af1158015610d80573d6000803e3d6000fd5b50505050508080610d90906115c9565b915050610cec565b5060028101805460ff60a01b1916905560405182907f39c4075a3427393cc79841c9441c046377afac9c2a2ec2a5ced42f23b127e75890600090a25050565b6001546001600160a01b03163314610e2a5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016104d8565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000546001600160a01b03163314801590610ea757506002546001600160a01b03163314155b15610ef85733610ebf6000546001600160a01b031690565b60025460405163061db9c160e01b81526001600160a01b03938416600482015291831660248301529190911660448201526064016104d8565b6001600160a01b038116610f1f5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be69060200160405180910390a150565b610f7b610ff8565b610f848161120b565b50565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa82604051602401610fc091511515815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b6000546001600160a01b0316331461104b5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016104d8565b565b6000838152600b6020908152604080832054600c835281842054808552600990935290832060018101546001600160a01b039092169390918686838161109557611095611579565b905060200201356110a6919061165a565b905060008260010182815481106110bf576110bf611579565b6000918252602090912001546002840154604051632142170760e11b81529192506001600160a01b0316906342842e0e906111029030908990869060040161158f565b600060405180830381600087803b15801561111c57600080fd5b505af1158015611130573d6000803e3d6000fd5b505050506001838101805490916111469161167c565b8154811061115657611156611579565b906000526020600020015483600101838154811061117657611176611579565b6000918252602090912001556001830180548061119557611195611695565b60019003818190600052602060002001600090559055837fddd95c0fd29204619fa452bc152b20209cec665d50aef28fa3a0e532e9b27f1c8983886040516111f99392919092835260208301919091526001600160a01b0316604082015260600190565b60405180910390a25050505050505050565b336001600160a01b038216036112635760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016104d8565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156112c657600080fd5b5035919050565b60008083601f8401126112df57600080fd5b50813567ffffffffffffffff8111156112f757600080fd5b6020830191508360208260051b850101111561131257600080fd5b9250929050565b60008060006040848603121561132e57600080fd5b83359250602084013567ffffffffffffffff81111561134c57600080fd5b611358868287016112cd565b9497909650939450505050565b6001600160a01b0381168114610f8457600080fd5b60008060008060006080868803121561139257600080fd5b853561139d81611365565b945060208601356113ad81611365565b935060408601359250606086013567ffffffffffffffff808211156113d157600080fd5b818801915088601f8301126113e557600080fd5b8135818111156113f457600080fd5b89602082850101111561140657600080fd5b9699959850939650602001949392505050565b60006020828403121561142b57600080fd5b813561143681611365565b9392505050565b6000806000806060858703121561145357600080fd5b843561145e81611365565b9350602085013567ffffffffffffffff81111561147a57600080fd5b611486878288016112cd565b9598909750949560400135949350505050565b602080825260119082015270426f78206973206e6f742061637469766560781b604082015260600190565b6000602080835283518184015280840151604084015261ffff6040850151166060840152606084015163ffffffff80821660808601528060808701511660a0860152505060a084015160c08085015280518060e086015260005b8181101561153b578281018401518682016101000152830161151e565b506101009250600083828701015282601f19601f830116860101935050505092915050565b60006020828403121561157257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016115db576115db6115b3565b5060010190565b6020808252810182905260006001600160fb1b0383111561160257600080fd5b8260051b80856040850137919091016040019392505050565b60006020828403121561162d57600080fd5b815161143681611365565b60006020828403121561164a57600080fd5b8151801515811461143657600080fd5b60008261167757634e487b7160e01b600052601260045260246000fd5b500690565b8181038181111561168f5761168f6115b3565b92915050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122095001cfecc174906e761beebb1460fc331047566658c45783efe48e0e982694664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "setCoordinator(address)": {
        "notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 97,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 99,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 299,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "s_vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVRFCoordinatorV2Plus)448"
      },
      {
        "astId": 4321,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4324,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4327,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "s_keyHash",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 4330,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 4333,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 4336,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "numWords",
        "offset": 6,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 4357,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "blindBoxListFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4359,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "boxCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4364,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "boxes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Box)4319_storage)"
      },
      {
        "astId": 4368,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "userRequestId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4372,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "s_rollers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4376,
        "contract": "contracts/BlindBox.sol:BlindBox",
        "label": "s_boxIds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVRFCoordinatorV2Plus)448": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinatorV2Plus",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Box)4319_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BlindBox.Box)",
        "numberOfBytes": "32",
        "value": "t_struct(Box)4319_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Box)4319_storage": {
        "encoding": "inplace",
        "label": "struct BlindBox.Box",
        "members": [
          {
            "astId": 4311,
            "contract": "contracts/BlindBox.sol:BlindBox",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4314,
            "contract": "contracts/BlindBox.sol:BlindBox",
            "label": "nftIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4316,
            "contract": "contracts/BlindBox.sol:BlindBox",
            "label": "nftContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4318,
            "contract": "contracts/BlindBox.sol:BlindBox",
            "label": "isActive",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}