{
  "address": "0x30ecbdB14Dc042E4e68aA5181de4f5B317b23eB7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_listFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userMintFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "royaltyRate",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "enum YourCollectible.Rarity",
          "name": "rarity",
          "type": "uint8"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "Purchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        },
        {
          "internalType": "uint96[]",
          "name": "royaltyRates",
          "type": "uint96[]"
        }
      ],
      "name": "batchMintItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "delistNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRarity",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "royaltyRate",
          "type": "uint96"
        }
      ],
      "name": "mintItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchaseNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenRarity",
      "outputs": [
        {
          "internalType": "enum YourCollectible.Rarity",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "updateNFTPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3075546bf91a59b5fdeb45419cdc63aa3550a899f2cc7ba8a61183bebd7926ec",
  "receipt": {
    "to": null,
    "from": "0x70b675a7a260F9E4E47eB580ae23080F00180F3f",
    "contractAddress": "0x30ecbdB14Dc042E4e68aA5181de4f5B317b23eB7",
    "transactionIndex": 71,
    "gasUsed": "3359863",
    "logsBloom": "0x
    "blockHash": "0x5a08b27a8c3aaa0f28491532a1471ed0e72323e398ab89bb414a1153a1ca7493",
    "transactionHash": "0x3075546bf91a59b5fdeb45419cdc63aa3550a899f2cc7ba8a61183bebd7926ec",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 7301247,
        "transactionHash": "0x3075546bf91a59b5fdeb45419cdc63aa3550a899f2cc7ba8a61183bebd7926ec",
        "address": "0x30ecbdB14Dc042E4e68aA5181de4f5B317b23eB7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070b675a7a260f9e4e47eb580ae23080f00180f3f"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x5a08b27a8c3aaa0f28491532a1471ed0e72323e398ab89bb414a1153a1ca7493"
      }
    ],
    "blockNumber": 7301247,
    "cumulativeGasUsed": "8387177",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    "50000000000000000"
  ],
  "numDeployments": 22,
  "solcInputHash": "6cabe9d7ee3cf3b7d542f099810e527a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userMintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"royaltyRate\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"enum YourCollectible.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"internalType\":\"uint96[]\",\"name\":\"royaltyRates\",\"type\":\"uint96[]\"}],\"name\":\"batchMintItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"delistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"royaltyRate\",\"type\":\"uint96\"}],\"name\":\"mintItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRarity\",\"outputs\":[{\"internalType\":\"enum YourCollectible.Rarity\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateNFTPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"YourCollectible\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x93d24eea4e6ddbed53ef161567ae62bfd0c3aebb7b48f37e4dbeb7a937108866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/YourCollectible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract YourCollectible is\\n\\tERC721,\\n\\tERC721Enumerable,\\n\\tERC721URIStorage,\\n\\tIERC721Receiver,\\n\\tERC721Royalty,\\n\\tOwnable\\n{\\n\\tusing Counters for Counters.Counter;\\n\\n\\tCounters.Counter public tokenIdCounter;\\n\\n\\tuint256 public listingFee;\\n\\n\\tuint256 public userMintFee;\\n\\n\\tmapping(uint256 => bool) private _firstPurchase;\\n\\tmapping(uint256 => uint96) private _royaltyRate;\\n\\n\\tstruct Listing {\\n\\t\\taddress seller;\\n\\t\\tuint256 price;\\n\\t\\tuint256 listingFee;\\n\\t\\tbool isList;\\n\\t}\\n\\n\\tuint256 balance = 0;\\n\\n\\tmapping(uint256 => Listing) public listings;\\n\\n\\tenum Rarity {\\n\\t\\twhite,\\n\\t\\tgreen,\\n\\t\\tblue,\\n\\t\\tpurple,\\n\\t\\tgold,\\n\\t\\tred\\n\\t}\\n\\tmapping(uint256 => Rarity) public tokenRarity;\\n\\n\\tevent Listed(uint256 indexed tokenId, uint256 price, address seller);\\n\\n\\tevent Purchased(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress seller,\\n\\t\\taddress buyer,\\n\\t\\tuint256 price,\\n\\t\\tuint256 royaltyAmount\\n\\t);\\n\\n\\tevent NFTMinted(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress owner,\\n\\t\\tstring tokenURI,\\n\\t\\tuint96 royaltyRate,\\n\\t\\tRarity rarity\\n\\t);\\n\\n\\tevent Airdrop(uint256 tokenId, address recipient);\\n\\n\\tconstructor(\\n\\t\\tuint256 _listFee,\\n\\t\\tuint256 _userMintFee\\n\\t) ERC721(\\\"YourCollectible\\\", \\\"YCB\\\") {\\n\\t\\tlistingFee = _listFee;\\n\\t\\tuserMintFee = _userMintFee;\\n\\t}\\n\\n\\tfunction _baseURI() internal pure override returns (string memory) {\\n\\t\\treturn \\\"https://ipfs.io/ipfs/\\\";\\n\\t}\\n\\n\\tfunction _assignRarity(uint256 tokenId) internal returns (Rarity) {\\n\\t\\tuint256 rand = uint256(\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(block.timestamp, block.prevrandao, tokenId)\\n\\t\\t\\t)\\n\\t\\t) % 100;\\n\\n\\t\\tif (rand < 35) {\\n\\t\\t\\ttokenRarity[tokenId] = Rarity.white;\\n\\t\\t} else if (rand < 60) {\\n\\t\\t\\ttokenRarity[tokenId] = Rarity.green;\\n\\t\\t} else if (rand < 80) {\\n\\t\\t\\ttokenRarity[tokenId] = Rarity.blue;\\n\\t\\t} else if (rand < 90) {\\n\\t\\t\\ttokenRarity[tokenId] = Rarity.purple;\\n\\t\\t} else if (rand < 97) {\\n\\t\\t\\ttokenRarity[tokenId] = Rarity.gold;\\n\\t\\t} else {\\n\\t\\t\\ttokenRarity[tokenId] = Rarity.red;\\n\\t\\t}\\n\\n\\t\\treturn tokenRarity[tokenId];\\n\\t}\\n\\n\\t    // \\u6279\\u91cf\\u6279\\u51c6\\uff08\\u6279\\u91cf approve\\uff09\\n    function batchApprove(address to, uint256[] calldata tokenIds) external {\\n        require(to != address(0), \\\"Cannot approve to zero address\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(ownerOf(tokenId) == msg.sender, \\\"Caller is not token owner\\\");\\n\\n            // \\u6279\\u51c6\\u6307\\u5b9a\\u5730\\u5740\\u64cd\\u4f5c\\u6307\\u5b9a\\u7684 tokenId\\n            approve(to, tokenId);\\n        }\\n    }\\n\\n\\n\\t// \\u6279\\u91cf\\u94f8\\u9020 NFT\\uff08owner\\uff09\\n\\tfunction batchMintItems(\\n\\t\\taddress to,\\n\\t\\tstring[] memory uris,\\n\\t\\tuint96[] memory royaltyRates\\n\\t) public onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\turis.length == royaltyRates.length,\\n\\t\\t\\t\\\"Mismatched uris and royaltyRates\\\"\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < uris.length; i++) {\\n\\t\\t\\ttokenIdCounter.increment();\\n\\t\\t\\tuint256 tokenId = tokenIdCounter.current();\\n\\n\\t\\t\\t_safeMint(to, tokenId);\\n\\t\\t\\t_setTokenURI(tokenId, uris[i]);\\n\\t\\t\\t_setTokenRoyalty(tokenId, to, royaltyRates[i]);\\n\\t\\t\\t_royaltyRate[tokenId] = royaltyRates[i];\\n\\t\\t\\t_firstPurchase[tokenId] = true;\\n\\n\\t\\t\\t// \\u5206\\u914d\\u7a00\\u6709\\u5ea6\\n\\t\\t\\tRarity rarity = _assignRarity(tokenId);\\n\\n\\t\\t\\temit NFTMinted(tokenId, to, uris[i], royaltyRates[i], rarity);\\n\\t\\t}\\n\\n\\t\\tbalance += uris.length;\\n\\t}\\n\\n\\t// \\u7a7a\\u6295\\u529f\\u80fd\\n\\tfunction airdrop(\\n\\t\\taddress[] calldata recipients,\\n\\t\\tuint256[] calldata tokenIds\\n\\t) external onlyOwner {\\n\\t\\trequire(recipients.length == tokenIds.length, \\\"Mismatched inputs\\\");\\n\\n\\t\\tfor (uint256 i = 0; i < recipients.length; i++) {\\n\\t\\t\\tuint256 tokenId = tokenIds[i];\\n\\t\\t\\taddress recipient = recipients[i];\\n\\n\\t\\t\\t// \\u68c0\\u67e5 NFT \\u662f\\u5426\\u7531\\u7ba1\\u7406\\u5458\\u6301\\u6709\\n\\t\\t\\trequire(ownerOf(tokenId) == owner(), \\\"Admin must own the token\\\");\\n\\n\\t\\t\\t// \\u8f6c\\u79fb NFT \\u7ed9\\u63a5\\u6536\\u8005\\n\\t\\t\\t_transfer(owner(), recipient, tokenId);\\n\\n\\t\\t\\t// \\u66f4\\u65b0\\u8bb0\\u5f55\\n\\t\\t\\tlistings[tokenId].isList = false;\\n\\t\\t\\tlistings[tokenId].seller = recipient;\\n\\n\\t\\t\\temit Airdrop(tokenId, recipient);\\n\\t\\t}\\n\\t}\\n\\n\\t// \\u5356\\u5bb6\\u4e0a\\u67b6 NFT\\n\\tfunction listNFT(uint256 tokenId, uint256 price) external payable {\\n\\t\\trequire(msg.value >= listingFee, \\\"Insufficient listing fee\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\tIERC721(address(this)).getApproved(tokenId) == address(this) ||\\n\\t\\t\\t\\tIERC721(address(this)).isApprovedForAll(\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\taddress(this)\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\\"Marketplace not approved\\\"\\n\\t\\t);\\n\\n\\t\\tIERC721(address(this)).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\n\\t\\tif (listings[tokenId].seller != address(0)) {\\n\\t\\t\\tlistings[tokenId].seller = msg.sender;\\n\\t\\t\\tlistings[tokenId].price = price;\\n\\t\\t\\tlistings[tokenId].listingFee = msg.value;\\n\\t\\t\\tlistings[tokenId].isList = true;\\n\\t\\t} else {\\n\\t\\t\\tlistings[tokenId] = Listing({\\n\\t\\t\\t\\tseller: msg.sender,\\n\\t\\t\\t\\tprice: price,\\n\\t\\t\\t\\tlistingFee: msg.value,\\n\\t\\t\\t\\tisList: true\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\temit Listed(tokenId, price, msg.sender);\\n\\t}\\n\\n\\tfunction delistNFT(uint256 tokenId) external {\\n\\t\\trequire(msg.sender == listings[tokenId].seller, \\\"Not authorized\\\");\\n\\t\\tlistings[tokenId].isList = false;\\n\\t\\tIERC721(address(this)).safeTransferFrom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updateNFTPrice(uint256 tokenId, uint256 price) external {\\n\\t\\trequire(msg.sender == listings[tokenId].seller, \\\"Not authorized\\\");\\n\\t\\tlistings[tokenId].price = price;\\n\\t}\\n\\n\\tfunction purchaseNFT(uint256 tokenId) external payable {\\n\\t\\tListing memory listing = listings[tokenId];\\n\\t\\trequire(listing.price > 0, \\\"NFT not listed\\\");\\n\\t\\trequire(msg.value >= listing.price, \\\"Insufficient funds sent\\\");\\n\\n\\t\\tif (_firstPurchase[tokenId]) {\\n\\t\\t\\t_firstPurchase[tokenId] = false;\\n\\t\\t\\tpayable(listing.seller).transfer(msg.value);\\n\\t\\t\\temit Purchased(tokenId, listing.seller, msg.sender, msg.value, 0);\\n\\t\\t} else {\\n\\t\\t\\tuint256 salePrice = msg.value;\\n\\t\\t\\t(address royaltyReceiver, uint256 royaltyAmount) = royaltyInfo(\\n\\t\\t\\t\\ttokenId,\\n\\t\\t\\t\\tsalePrice\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tmsg.value >= royaltyAmount,\\n\\t\\t\\t\\t\\\"Insufficient payment for royalty\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\tpayable(royaltyReceiver).transfer(royaltyAmount);\\n\\n\\t\\t\\tpayable(listing.seller).transfer(salePrice - royaltyAmount);\\n\\t\\t\\temit Purchased(\\n\\t\\t\\t\\ttokenId,\\n\\t\\t\\t\\tlisting.seller,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tmsg.value,\\n\\t\\t\\t\\troyaltyAmount\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tIERC721(address(this)).safeTransferFrom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\n\\t\\tlistings[tokenId].isList = false;\\n\\t\\tlistings[tokenId].seller = msg.sender;\\n\\t}\\n\\n\\tfunction mintItem(\\n\\t\\taddress to,\\n\\t\\tstring memory uri,\\n\\t\\tuint96 royaltyRate\\n\\t) public payable {\\n\\t\\trequire(msg.value >= userMintFee, \\\"Insufficient user mint fee\\\");\\n\\t\\ttokenIdCounter.increment();\\n\\t\\tuint256 tokenId = tokenIdCounter.current();\\n\\t\\t_safeMint(to, tokenId);\\n\\t\\t_setTokenURI(tokenId, uri);\\n\\t\\t_setTokenRoyalty(tokenId, to, royaltyRate);\\n\\t\\t_royaltyRate[tokenId] = royaltyRate;\\n\\t\\t_firstPurchase[tokenId] = true;\\n\\t\\tbalance++;\\n\\t\\t// \\u5206\\u914d\\u7a00\\u6709\\u5ea6\\n\\t\\tRarity rarity = _assignRarity(tokenId);\\n\\t\\temit NFTMinted(tokenId, to, uri, royaltyRate, rarity);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 quantity\\n\\t) internal override(ERC721, ERC721Enumerable) {\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId, quantity);\\n\\t}\\n\\n\\tfunction _burn(\\n\\t\\tuint256 tokenId\\n\\t) internal override(ERC721, ERC721URIStorage, ERC721Royalty) {\\n\\t\\tsuper._burn(tokenId);\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n\\t\\treturn super.tokenURI(tokenId);\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Royalty)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction totalBalance() external view returns (uint256) {\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction getRoyaltyRate(uint256 tokenId) external view returns (uint256) {\\n\\t\\treturn _royaltyRate[tokenId];\\n\\t}\\n\\n\\tfunction getRarity(uint256 tokenId) external view returns (string memory) {\\n\\t\\tRarity rarity = tokenRarity[tokenId];\\n\\t\\tif (rarity == Rarity.white) return \\\"white\\\";\\n\\t\\tif (rarity == Rarity.green) return \\\"green\\\";\\n\\t\\tif (rarity == Rarity.blue) return \\\"blue\\\";\\n\\t\\tif (rarity == Rarity.purple) return \\\"purple\\\";\\n\\t\\tif (rarity == Rarity.gold) return \\\"gold\\\";\\n\\t\\tif (rarity == Rarity.red) return \\\"red\\\";\\n\\t\\treturn \\\"Unknown\\\";\\n\\t}\\n\\n\\tfunction onERC721Received(\\n\\t\\taddress /*operator*/,\\n\\t\\taddress /*from*/,\\n\\t\\tuint256 /*tokenId*/,\\n\\t\\tbytes calldata /*data*/\\n\\t) external pure override returns (bytes4) {\\n\\t\\treturn this.onERC721Received.selector;\\n\\t}\\n\\n\\t// \\u63d0\\u73b0\\u529f\\u80fd\\n\\tfunction withdraw() external onlyOwner {\\n\\t\\tuint256 balanceToWithdraw = address(this).balance;\\n\\t\\trequire(balanceToWithdraw > 0, \\\"No balance to withdraw\\\");\\n\\n\\t\\t// \\u5c06\\u4f59\\u989d\\u8f6c\\u79fb\\u5230\\u5408\\u7ea6\\u7684\\u6240\\u6709\\u8005\\u5730\\u5740\\n\\t\\tpayable(owner()).transfer(balanceToWithdraw);\\n\\t}\\n\\n\\t// \\u67e5\\u8be2\\u5408\\u7ea6\\u4f59\\u989d\\n\\tfunction getContractBalance() external view returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n}\\n\",\"keccak256\":\"0x2f61308f0517682e87e1409d524904ccb9d31517585f73d40f901bb1da5f3610\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006013553480156200001657600080fd5b5060405162003c4b38038062003c4b83398101604081905262000039916200011f565b6040518060400160405280600f81526020016e596f7572436f6c6c65637469626c6560881b815250604051806040016040528060038152602001622ca1a160e91b81525081600290816200008e9190620001e9565b5060036200009d8282620001e9565b505050620000ba620000b4620000c960201b60201c565b620000cd565b600f91909155601055620002b5565b3390565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080604083850312156200013357600080fd5b505080516020909101519092909150565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016f57607f821691505b6020821081036200019057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e457600081815260208120601f850160051c81016020861015620001bf5750805b601f850160051c820191505b81811015620001e057828155600101620001cb565b5050505b505050565b81516001600160401b0381111562000205576200020562000144565b6200021d816200021684546200015a565b8462000196565b602080601f8311600181146200025557600084156200023c5750858301515b600019600386901b1c1916600185901b178555620001e0565b600085815260208120601f198616915b82811015620002865788860151825594840194600190910190840162000265565b5085821015620002a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61398680620002c56000396000f3fe6080604052600436106102305760003560e01c80636352211e1161012e57806398bdf6f5116100ab578063c87b56dd1161006f578063c87b56dd146106a1578063cb917b9c146106c1578063de74e57b146106e1578063e985e9c51461075c578063f2fde38b146107a557600080fd5b806398bdf6f5146105f8578063a22cb4651461060f578063ad7a672f1461062f578063afb0a36914610644578063b88d4fde1461068157600080fd5b806370a08231116100f257806370a082311461057d578063715018a61461059d5780638da5cb5b146105b257806394383f14146105d057806395d89b41146105e357600080fd5b80636352211e146104f457806365d5a9d01461051457806367243482146105345780636a1b7ecc146105545780636f9fb98a1461056a57600080fd5b80632a55205a116101bc57806342842e0e1161018057806342842e0e146104545780634782d53c1461047457806348758697146104945780634ac0123d146104b45780634f6ccce7146104d457600080fd5b80632a55205a146103b75780632f745c59146103f65780633877248d1461041657806338e864f4146104295780633ccfd60b1461043f57600080fd5b8063150b7a0211610203578063150b7a02146102e6578063150bde031461032b5780631524afc91461033e57806318160ddd1461038257806323b872dd1461039757600080fd5b806301ffc9a71461023557806306fdde031461026a578063081812fc1461028c578063095ea7b3146102c4575b600080fd5b34801561024157600080fd5b50610255610250366004612e50565b6107c5565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061027f6107d6565b6040516102619190612ebd565b34801561029857600080fd5b506102ac6102a7366004612ed0565b610868565b6040516001600160a01b039091168152602001610261565b3480156102d057600080fd5b506102e46102df366004612efe565b61088f565b005b3480156102f257600080fd5b50610312610301366004612f2a565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610261565b6102e4610339366004612ed0565b6109a9565b34801561034a57600080fd5b50610374610359366004612ed0565b6000908152601260205260409020546001600160601b031690565b604051908152602001610261565b34801561038e57600080fd5b50600a54610374565b3480156103a357600080fd5b506102e46103b2366004612fc9565b610d02565b3480156103c357600080fd5b506103d76103d236600461300a565b610d33565b604080516001600160a01b039093168352602083019190915201610261565b34801561040257600080fd5b50610374610411366004612efe565b610de1565b6102e4610424366004613107565b610e77565b34801561043557600080fd5b5061037460105481565b34801561044b57600080fd5b506102e4610faa565b34801561046057600080fd5b506102e461046f366004612fc9565b611037565b34801561048057600080fd5b506102e461048f3660046131fd565b611052565b3480156104a057600080fd5b5061027f6104af366004612ed0565b611233565b3480156104c057600080fd5b506102e46104cf36600461300a565b6113d3565b3480156104e057600080fd5b506103746104ef366004612ed0565b61143f565b34801561050057600080fd5b506102ac61050f366004612ed0565b6114d2565b34801561052057600080fd5b506102e461052f36600461332a565b611532565b34801561054057600080fd5b506102e461054f36600461337f565b61163c565b34801561056057600080fd5b50610374600f5481565b34801561057657600080fd5b5047610374565b34801561058957600080fd5b506103746105983660046133eb565b6117fa565b3480156105a957600080fd5b506102e4611880565b3480156105be57600080fd5b50600d546001600160a01b03166102ac565b6102e46105de36600461300a565b611894565b3480156105ef57600080fd5b5061027f611b7a565b34801561060457600080fd5b50600e546103749081565b34801561061b57600080fd5b506102e461062a366004613416565b611b89565b34801561063b57600080fd5b50601354610374565b34801561065057600080fd5b5061067461065f366004612ed0565b60156020526000908152604090205460ff1681565b6040516102619190613487565b34801561068d57600080fd5b506102e461069c366004613495565b611b94565b3480156106ad57600080fd5b5061027f6106bc366004612ed0565b611bc6565b3480156106cd57600080fd5b506102e46106dc366004612ed0565b611bd1565b3480156106ed57600080fd5b506107306106fc366004612ed0565b60146020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b03909516855260208501939093529183015215156060820152608001610261565b34801561076857600080fd5b50610255610777366004613515565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156107b157600080fd5b506102e46107c03660046133eb565b611c9b565b60006107d082611d14565b92915050565b6060600280546107e590613543565b80601f016020809104026020016040519081016040528092919081815260200182805461081190613543565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b5050505050905090565b600061087382611d1f565b506000908152600660205260409020546001600160a01b031690565b600061089a826114d2565b9050806001600160a01b0316836001600160a01b03160361090c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061092857506109288133610777565b61099a5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610903565b6109a48383611d7e565b505050565b600081815260146020908152604091829020825160808101845281546001600160a01b0316815260018201549281018390526002820154938101939093526003015460ff1615156060830152610a325760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1a5cdd195960921b6044820152606401610903565b8060200151341015610a865760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610903565b60008281526011602052604090205460ff1615610b4557600082815260116020526040808220805460ff19169055825190516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015610aeb573d6000803e3d6000fd5b508051604080516001600160a01b03909216825233602083015234908201526000606082015282907f5455e1f43c674b0e790485adf9e64c058a505bbff2e540eba3a4e612a3a85ec49060800160405180910390a2610c77565b34600080610b538584610d33565b9150915080341015610ba75760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74207061796d656e7420666f7220726f79616c74796044820152606401610903565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610bdd573d6000803e3d6000fd5b5083516001600160a01b03166108fc610bf68386613593565b6040518115909202916000818181858888f19350505050158015610c1e573d6000803e3d6000fd5b508351604080516001600160a01b03909216825233602083015234908201526060810182905285907f5455e1f43c674b0e790485adf9e64c058a505bbff2e540eba3a4e612a3a85ec49060800160405180910390a25050505b604051632142170760e11b8152306004820181905233602483015260448201849052906342842e0e90606401600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b5050506000928352505060146020526040902060038101805460ff1916905580546001600160a01b03191633179055565b610d0c3382611dec565b610d285760405162461bcd60e51b8152600401610903906135a6565b6109a4838383611e6b565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610da85750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610dc7906001600160601b0316876135f3565b610dd19190613620565b91519350909150505b9250929050565b6000610dec836117fa565b8210610e4e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610903565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b601054341015610ec95760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742075736572206d696e74206665650000000000006044820152606401610903565b610ed7600e80546001019055565b6000610ee2600e5490565b9050610eee8482611fdc565b610ef88184611ff6565b610f038185846120c1565b600081815260126020908152604080832080546bffffffffffffffffffffffff19166001600160601b03871617905560119091528120805460ff191660011790556013805491610f5283613634565b91905055506000610f62826121cf565b90507f479f025f7efdb927780d7703773f09c42f890c6705bff4e36c0d1137c76f501e8286868685604051610f9b95949392919061364d565b60405180910390a15050505050565b610fb2612317565b4780610ff95760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606401610903565b600d546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611033573d6000803e3d6000fd5b5050565b6109a483838360405180602001604052806000815250611b94565b61105a612317565b80518251146110ab5760405162461bcd60e51b815260206004820181905260248201527f4d69736d617463686564207572697320616e6420726f79616c747952617465736044820152606401610903565b60005b8251811015611215576110c5600e80546001019055565b60006110d0600e5490565b90506110dc8582611fdc565b6110ff818584815181106110f2576110f261369f565b6020026020010151611ff6565b61112381868585815181106111165761111661369f565b60200260200101516120c1565b8282815181106111355761113561369f565b602090810291909101810151600083815260128352604080822080546bffffffffffffffffffffffff19166001600160601b039094169390931790925560119092528120805460ff1916600117905561118d826121cf565b90507f479f025f7efdb927780d7703773f09c42f890c6705bff4e36c0d1137c76f501e82878786815181106111c4576111c461369f565b60200260200101518787815181106111de576111de61369f565b6020026020010151856040516111f895949392919061364d565b60405180910390a15050808061120d90613634565b9150506110ae565b5081516013600082825461122991906136b5565b9091555050505050565b60008181526015602052604081205460609160ff9091169081600581111561125d5761125d61344f565b03611285575050604080518082019091526005815264776869746560d81b6020820152919050565b60018160058111156112995761129961344f565b036112c157505060408051808201909152600581526433b932b2b760d91b6020820152919050565b60028160058111156112d5576112d561344f565b036112fc575050604080518082019091526004815263626c756560e01b6020820152919050565b60038160058111156113105761131061344f565b03611339575050604080518082019091526006815265707572706c6560d01b6020820152919050565b600481600581111561134d5761134d61344f565b0361137457505060408051808201909152600481526319dbdb1960e21b6020820152919050565b60058160058111156113885761138861344f565b036113ae5750506040805180820190915260038152621c995960ea1b6020820152919050565b50506040805180820190915260078152662ab735b737bbb760c91b6020820152919050565b6000828152601460205260409020546001600160a01b0316331461142a5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610903565b60009182526014602052604090912060010155565b600061144a600a5490565b82106114ad5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610903565b600a82815481106114c0576114c061369f565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b0316806107d05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610903565b6001600160a01b0383166115885760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420617070726f766520746f207a65726f206164647265737300006044820152606401610903565b60005b818110156116365760008383838181106115a7576115a761369f565b905060200201359050336001600160a01b03166115c3826114d2565b6001600160a01b0316146116195760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f7420746f6b656e206f776e6572000000000000006044820152606401610903565b611623858261088f565b508061162e81613634565b91505061158b565b50505050565b611644612317565b8281146116875760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b6044820152606401610903565b60005b838110156117f35760008383838181106116a6576116a661369f565b90506020020135905060008686848181106116c3576116c361369f565b90506020020160208101906116d891906133eb565b90506116ec600d546001600160a01b031690565b6001600160a01b03166116fe836114d2565b6001600160a01b0316146117545760405162461bcd60e51b815260206004820152601860248201527f41646d696e206d757374206f776e2074686520746f6b656e00000000000000006044820152606401610903565b611770611769600d546001600160a01b031690565b8284611e6b565b60008281526014602090815260409182902060038101805460ff1916905580546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f7871e154ac114554d9482c2356ea08c8934e9907ad45c33ca7c3677f2b157383910160405180910390a1505080806117eb90613634565b91505061168a565b5050505050565b60006001600160a01b0382166118645760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610903565b506001600160a01b031660009081526005602052604090205490565b611888612317565b6118926000612371565b565b600f543410156118e65760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206c697374696e672066656500000000000000006044820152606401610903565b60405163020604bf60e21b8152600481018390523090819063081812fc90602401602060405180830381865afa158015611924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194891906136c8565b6001600160a01b031614806119be575060405163e985e9c560e01b815233600482015230602482018190529063e985e9c590604401602060405180830381865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be91906136e5565b611a0a5760405162461bcd60e51b815260206004820152601860248201527f4d61726b6574706c616365206e6f7420617070726f76656400000000000000006044820152606401610903565b604051632142170760e11b8152336004820152306024820181905260448201849052906342842e0e90606401600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b5050506000838152601460205260409020546001600160a01b0316159050611ac757600082815260146020526040902080546001600160a01b0319163317815560018082018390553460028301556003909101805460ff19169091179055611b3c565b604080516080810182523381526020808201848152348385019081526001606085018181526000898152601490955295909320935184546001600160a01b0319166001600160a01b0390911617845590519183019190915551600282015590516003909101805460ff19169115159190911790555b6040805182815233602082015283917fb4e5606a376800f822ae7ce93010dddb4ebd38ca6db1bdbc2d0a1de90c9079e4910160405180910390a25050565b6060600380546107e590613543565b6110333383836123c3565b611b9e3383611dec565b611bba5760405162461bcd60e51b8152600401610903906135a6565b61163684848484612491565b60606107d0826124c4565b6000818152601460205260409020546001600160a01b03163314611c285760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610903565b60008181526014602052604090819020600301805460ff1916905551632142170760e11b8152306004820181905233602483015260448201839052906342842e0e90606401600060405180830381600087803b158015611c8757600080fd5b505af11580156117f3573d6000803e3d6000fd5b611ca3612317565b6001600160a01b038116611d085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610903565b611d1181612371565b50565b60006107d0826125e9565b6000818152600460205260409020546001600160a01b0316611d115760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610903565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611db3826114d2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611df8836114d2565b9050806001600160a01b0316846001600160a01b03161480611e3f57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80611e635750836001600160a01b0316611e5884610868565b6001600160a01b0316145b949350505050565b826001600160a01b0316611e7e826114d2565b6001600160a01b031614611ea45760405162461bcd60e51b815260040161090390613702565b6001600160a01b038216611f065760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610903565b611f13838383600161260e565b826001600160a01b0316611f26826114d2565b6001600160a01b031614611f4c5760405162461bcd60e51b815260040161090390613702565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61103382826040518060200160405280600081525061261a565b6000828152600460205260409020546001600160a01b03166120715760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610903565b6000828152600c602052604090206120898282613795565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6127106001600160601b038216111561212f5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610903565b6001600160a01b0382166121855760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610903565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6040805142602082015244918101919091526060810182905260009081906064906080016040516020818303038152906040528051906020012060001c6122169190613855565b90506023811015612243576000838152601560205260408120805460ff19166001835b0217905550612300565b603c81101561226b57600083815260156020526040902080546001919060ff19168280612239565b605081101561229457600083815260156020526040902080546002919060ff1916600183612239565b605a8110156122bd57600083815260156020526040902080546003919060ff1916600183612239565b60618110156122e657600083815260156020526040902080546004919060ff1916600183612239565b6000838152601560205260409020805460ff191660051790555b505060009081526015602052604090205460ff1690565b600d546001600160a01b031633146118925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610903565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036124245760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610903565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61249c848484611e6b565b6124a88484848461264d565b6116365760405162461bcd60e51b815260040161090390613869565b60606124cf82611d1f565b6000828152600c6020526040812080546124e890613543565b80601f016020809104026020016040519081016040528092919081815260200182805461251490613543565b80156125615780601f1061253657610100808354040283529160200191612561565b820191906000526020600020905b81548152906001019060200180831161254457829003601f168201915b50505050509050600061259c60408051808201909152601581527468747470733a2f2f697066732e696f2f697066732f60581b602082015290565b905080516000036125ae575092915050565b8151156125e05780826040516020016125c89291906138bb565b60405160208183030381529060405292505050919050565b611e638461274e565b60006001600160e01b03198216632483248360e11b14806107d057506107d0826127df565b61163684848484612804565b6126248383612931565b612631600084848461264d565b6109a45760405162461bcd60e51b815260040161090390613869565b60006001600160a01b0384163b1561274357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906126919033908990889088906004016138ea565b6020604051808303816000875af19250505080156126cc575060408051601f3d908101601f191682019092526126c99181019061391d565b60015b612729573d8080156126fa576040519150601f19603f3d011682016040523d82523d6000602084013e6126ff565b606091505b5080516000036127215760405162461bcd60e51b815260040161090390613869565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e63565b506001949350505050565b606061275982611d1f565b600061278d60408051808201909152601581527468747470733a2f2f697066732e696f2f697066732f60581b602082015290565b905060008151116127ad57604051806020016040528060008152506127d8565b806127b784612aca565b6040516020016127c89291906138bb565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b14806107d057506107d082612b5d565b60018111156128735760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610903565b816001600160a01b0385166128cf576128ca81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6128f2565b836001600160a01b0316856001600160a01b0316146128f2576128f28582612b9d565b6001600160a01b03841661290e5761290981612c3a565b6117f3565b846001600160a01b0316846001600160a01b0316146117f3576117f38482612ce9565b6001600160a01b0382166129875760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610903565b6000818152600460205260409020546001600160a01b0316156129ec5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610903565b6129fa60008383600161260e565b6000818152600460205260409020546001600160a01b031615612a5f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610903565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000612ad783612d2d565b600101905060008167ffffffffffffffff811115612af757612af761302c565b6040519080825280601f01601f191660200182016040528015612b21576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612b2b57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480612b8e57506001600160e01b03198216635b5e139f60e01b145b806107d057506107d082612e05565b60006001612baa846117fa565b612bb49190613593565b600083815260096020526040902054909150808214612c07576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090612c4c90600190613593565b6000838152600b6020526040812054600a8054939450909284908110612c7457612c7461369f565b9060005260206000200154905080600a8381548110612c9557612c9561369f565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480612ccd57612ccd61393a565b6001900381819060005260206000200160009055905550505050565b6000612cf4836117fa565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612d6c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612d98576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612db657662386f26fc10000830492506010015b6305f5e1008310612dce576305f5e100830492506008015b6127108310612de257612710830492506004015b60648310612df4576064830492506002015b600a83106107d05760010192915050565b60006001600160e01b0319821663152a902d60e11b14806107d057506301ffc9a760e01b6001600160e01b03198316146107d0565b6001600160e01b031981168114611d1157600080fd5b600060208284031215612e6257600080fd5b81356127d881612e3a565b60005b83811015612e88578181015183820152602001612e70565b50506000910152565b60008151808452612ea9816020860160208601612e6d565b601f01601f19169290920160200192915050565b6020815260006127d86020830184612e91565b600060208284031215612ee257600080fd5b5035919050565b6001600160a01b0381168114611d1157600080fd5b60008060408385031215612f1157600080fd5b8235612f1c81612ee9565b946020939093013593505050565b600080600080600060808688031215612f4257600080fd5b8535612f4d81612ee9565b94506020860135612f5d81612ee9565b935060408601359250606086013567ffffffffffffffff80821115612f8157600080fd5b818801915088601f830112612f9557600080fd5b813581811115612fa457600080fd5b896020828501011115612fb657600080fd5b9699959850939650602001949392505050565b600080600060608486031215612fde57600080fd5b8335612fe981612ee9565b92506020840135612ff981612ee9565b929592945050506040919091013590565b6000806040838503121561301d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561306b5761306b61302c565b604052919050565b600067ffffffffffffffff83111561308d5761308d61302c565b6130a0601f8401601f1916602001613042565b90508281528383830111156130b457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126130dc57600080fd5b6127d883833560208501613073565b80356001600160601b038116811461310257600080fd5b919050565b60008060006060848603121561311c57600080fd5b833561312781612ee9565b9250602084013567ffffffffffffffff81111561314357600080fd5b61314f868287016130cb565b92505061315e604085016130eb565b90509250925092565b600067ffffffffffffffff8211156131815761318161302c565b5060051b60200190565b600082601f83011261319c57600080fd5b813560206131b16131ac83613167565b613042565b82815260059290921b840181019181810190868411156131d057600080fd5b8286015b848110156131f2576131e5816130eb565b83529183019183016131d4565b509695505050505050565b60008060006060848603121561321257600080fd5b833561321d81612ee9565b925060208481013567ffffffffffffffff8082111561323b57600080fd5b818701915087601f83011261324f57600080fd5b813561325d6131ac82613167565b81815260059190911b8301840190848101908a83111561327c57600080fd5b8585015b838110156132b4578035858111156132985760008081fd5b6132a68d89838a01016130cb565b845250918601918601613280565b509650505060408701359250808311156132cd57600080fd5b50506132db8682870161318b565b9150509250925092565b60008083601f8401126132f757600080fd5b50813567ffffffffffffffff81111561330f57600080fd5b6020830191508360208260051b8501011115610dda57600080fd5b60008060006040848603121561333f57600080fd5b833561334a81612ee9565b9250602084013567ffffffffffffffff81111561336657600080fd5b613372868287016132e5565b9497909650939450505050565b6000806000806040858703121561339557600080fd5b843567ffffffffffffffff808211156133ad57600080fd5b6133b9888389016132e5565b909650945060208701359150808211156133d257600080fd5b506133df878288016132e5565b95989497509550505050565b6000602082840312156133fd57600080fd5b81356127d881612ee9565b8015158114611d1157600080fd5b6000806040838503121561342957600080fd5b823561343481612ee9565b9150602083013561344481613408565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b6006811061348357634e487b7160e01b600052602160045260246000fd5b9052565b602081016107d08284613465565b600080600080608085870312156134ab57600080fd5b84356134b681612ee9565b935060208501356134c681612ee9565b925060408501359150606085013567ffffffffffffffff8111156134e957600080fd5b8501601f810187136134fa57600080fd5b61350987823560208401613073565b91505092959194509250565b6000806040838503121561352857600080fd5b823561353381612ee9565b9150602083013561344481612ee9565b600181811c9082168061355757607f821691505b60208210810361357757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107d0576107d061357d565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b80820281158282048414176107d0576107d061357d565b634e487b7160e01b600052601260045260246000fd5b60008261362f5761362f61360a565b500490565b6000600182016136465761364661357d565b5060010190565b8581526001600160a01b038516602082015260a06040820181905260009061367790830186612e91565b90506001600160601b03841660608301526136956080830184613465565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b808201808211156107d0576107d061357d565b6000602082840312156136da57600080fd5b81516127d881612ee9565b6000602082840312156136f757600080fd5b81516127d881613408565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b601f8211156109a457600081815260208120601f850160051c8101602086101561376e5750805b601f850160051c820191505b8181101561378d5782815560010161377a565b505050505050565b815167ffffffffffffffff8111156137af576137af61302c565b6137c3816137bd8454613543565b84613747565b602080601f8311600181146137f857600084156137e05750858301515b600019600386901b1c1916600185901b17855561378d565b600085815260208120601f198616915b8281101561382757888601518255948401946001909101908401613808565b50858210156138455787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000826138645761386461360a565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600083516138cd818460208801612e6d565b8351908301906138e1818360208801612e6d565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061369590830184612e91565b60006020828403121561392f57600080fd5b81516127d881612e3a565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204661a52cfa330fe05d3df27c633a98097bbff3c9f3d471b6ee9802be86ec020a64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c80636352211e1161012e57806398bdf6f5116100ab578063c87b56dd1161006f578063c87b56dd146106a1578063cb917b9c146106c1578063de74e57b146106e1578063e985e9c51461075c578063f2fde38b146107a557600080fd5b806398bdf6f5146105f8578063a22cb4651461060f578063ad7a672f1461062f578063afb0a36914610644578063b88d4fde1461068157600080fd5b806370a08231116100f257806370a082311461057d578063715018a61461059d5780638da5cb5b146105b257806394383f14146105d057806395d89b41146105e357600080fd5b80636352211e146104f457806365d5a9d01461051457806367243482146105345780636a1b7ecc146105545780636f9fb98a1461056a57600080fd5b80632a55205a116101bc57806342842e0e1161018057806342842e0e146104545780634782d53c1461047457806348758697146104945780634ac0123d146104b45780634f6ccce7146104d457600080fd5b80632a55205a146103b75780632f745c59146103f65780633877248d1461041657806338e864f4146104295780633ccfd60b1461043f57600080fd5b8063150b7a0211610203578063150b7a02146102e6578063150bde031461032b5780631524afc91461033e57806318160ddd1461038257806323b872dd1461039757600080fd5b806301ffc9a71461023557806306fdde031461026a578063081812fc1461028c578063095ea7b3146102c4575b600080fd5b34801561024157600080fd5b50610255610250366004612e50565b6107c5565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061027f6107d6565b6040516102619190612ebd565b34801561029857600080fd5b506102ac6102a7366004612ed0565b610868565b6040516001600160a01b039091168152602001610261565b3480156102d057600080fd5b506102e46102df366004612efe565b61088f565b005b3480156102f257600080fd5b50610312610301366004612f2a565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610261565b6102e4610339366004612ed0565b6109a9565b34801561034a57600080fd5b50610374610359366004612ed0565b6000908152601260205260409020546001600160601b031690565b604051908152602001610261565b34801561038e57600080fd5b50600a54610374565b3480156103a357600080fd5b506102e46103b2366004612fc9565b610d02565b3480156103c357600080fd5b506103d76103d236600461300a565b610d33565b604080516001600160a01b039093168352602083019190915201610261565b34801561040257600080fd5b50610374610411366004612efe565b610de1565b6102e4610424366004613107565b610e77565b34801561043557600080fd5b5061037460105481565b34801561044b57600080fd5b506102e4610faa565b34801561046057600080fd5b506102e461046f366004612fc9565b611037565b34801561048057600080fd5b506102e461048f3660046131fd565b611052565b3480156104a057600080fd5b5061027f6104af366004612ed0565b611233565b3480156104c057600080fd5b506102e46104cf36600461300a565b6113d3565b3480156104e057600080fd5b506103746104ef366004612ed0565b61143f565b34801561050057600080fd5b506102ac61050f366004612ed0565b6114d2565b34801561052057600080fd5b506102e461052f36600461332a565b611532565b34801561054057600080fd5b506102e461054f36600461337f565b61163c565b34801561056057600080fd5b50610374600f5481565b34801561057657600080fd5b5047610374565b34801561058957600080fd5b506103746105983660046133eb565b6117fa565b3480156105a957600080fd5b506102e4611880565b3480156105be57600080fd5b50600d546001600160a01b03166102ac565b6102e46105de36600461300a565b611894565b3480156105ef57600080fd5b5061027f611b7a565b34801561060457600080fd5b50600e546103749081565b34801561061b57600080fd5b506102e461062a366004613416565b611b89565b34801561063b57600080fd5b50601354610374565b34801561065057600080fd5b5061067461065f366004612ed0565b60156020526000908152604090205460ff1681565b6040516102619190613487565b34801561068d57600080fd5b506102e461069c366004613495565b611b94565b3480156106ad57600080fd5b5061027f6106bc366004612ed0565b611bc6565b3480156106cd57600080fd5b506102e46106dc366004612ed0565b611bd1565b3480156106ed57600080fd5b506107306106fc366004612ed0565b60146020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b03909516855260208501939093529183015215156060820152608001610261565b34801561076857600080fd5b50610255610777366004613515565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156107b157600080fd5b506102e46107c03660046133eb565b611c9b565b60006107d082611d14565b92915050565b6060600280546107e590613543565b80601f016020809104026020016040519081016040528092919081815260200182805461081190613543565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b5050505050905090565b600061087382611d1f565b506000908152600660205260409020546001600160a01b031690565b600061089a826114d2565b9050806001600160a01b0316836001600160a01b03160361090c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061092857506109288133610777565b61099a5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610903565b6109a48383611d7e565b505050565b600081815260146020908152604091829020825160808101845281546001600160a01b0316815260018201549281018390526002820154938101939093526003015460ff1615156060830152610a325760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1a5cdd195960921b6044820152606401610903565b8060200151341015610a865760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610903565b60008281526011602052604090205460ff1615610b4557600082815260116020526040808220805460ff19169055825190516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015610aeb573d6000803e3d6000fd5b508051604080516001600160a01b03909216825233602083015234908201526000606082015282907f5455e1f43c674b0e790485adf9e64c058a505bbff2e540eba3a4e612a3a85ec49060800160405180910390a2610c77565b34600080610b538584610d33565b9150915080341015610ba75760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74207061796d656e7420666f7220726f79616c74796044820152606401610903565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610bdd573d6000803e3d6000fd5b5083516001600160a01b03166108fc610bf68386613593565b6040518115909202916000818181858888f19350505050158015610c1e573d6000803e3d6000fd5b508351604080516001600160a01b03909216825233602083015234908201526060810182905285907f5455e1f43c674b0e790485adf9e64c058a505bbff2e540eba3a4e612a3a85ec49060800160405180910390a25050505b604051632142170760e11b8152306004820181905233602483015260448201849052906342842e0e90606401600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b5050506000928352505060146020526040902060038101805460ff1916905580546001600160a01b03191633179055565b610d0c3382611dec565b610d285760405162461bcd60e51b8152600401610903906135a6565b6109a4838383611e6b565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610da85750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610dc7906001600160601b0316876135f3565b610dd19190613620565b91519350909150505b9250929050565b6000610dec836117fa565b8210610e4e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610903565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b601054341015610ec95760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e742075736572206d696e74206665650000000000006044820152606401610903565b610ed7600e80546001019055565b6000610ee2600e5490565b9050610eee8482611fdc565b610ef88184611ff6565b610f038185846120c1565b600081815260126020908152604080832080546bffffffffffffffffffffffff19166001600160601b03871617905560119091528120805460ff191660011790556013805491610f5283613634565b91905055506000610f62826121cf565b90507f479f025f7efdb927780d7703773f09c42f890c6705bff4e36c0d1137c76f501e8286868685604051610f9b95949392919061364d565b60405180910390a15050505050565b610fb2612317565b4780610ff95760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606401610903565b600d546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611033573d6000803e3d6000fd5b5050565b6109a483838360405180602001604052806000815250611b94565b61105a612317565b80518251146110ab5760405162461bcd60e51b815260206004820181905260248201527f4d69736d617463686564207572697320616e6420726f79616c747952617465736044820152606401610903565b60005b8251811015611215576110c5600e80546001019055565b60006110d0600e5490565b90506110dc8582611fdc565b6110ff818584815181106110f2576110f261369f565b6020026020010151611ff6565b61112381868585815181106111165761111661369f565b60200260200101516120c1565b8282815181106111355761113561369f565b602090810291909101810151600083815260128352604080822080546bffffffffffffffffffffffff19166001600160601b039094169390931790925560119092528120805460ff1916600117905561118d826121cf565b90507f479f025f7efdb927780d7703773f09c42f890c6705bff4e36c0d1137c76f501e82878786815181106111c4576111c461369f565b60200260200101518787815181106111de576111de61369f565b6020026020010151856040516111f895949392919061364d565b60405180910390a15050808061120d90613634565b9150506110ae565b5081516013600082825461122991906136b5565b9091555050505050565b60008181526015602052604081205460609160ff9091169081600581111561125d5761125d61344f565b03611285575050604080518082019091526005815264776869746560d81b6020820152919050565b60018160058111156112995761129961344f565b036112c157505060408051808201909152600581526433b932b2b760d91b6020820152919050565b60028160058111156112d5576112d561344f565b036112fc575050604080518082019091526004815263626c756560e01b6020820152919050565b60038160058111156113105761131061344f565b03611339575050604080518082019091526006815265707572706c6560d01b6020820152919050565b600481600581111561134d5761134d61344f565b0361137457505060408051808201909152600481526319dbdb1960e21b6020820152919050565b60058160058111156113885761138861344f565b036113ae5750506040805180820190915260038152621c995960ea1b6020820152919050565b50506040805180820190915260078152662ab735b737bbb760c91b6020820152919050565b6000828152601460205260409020546001600160a01b0316331461142a5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610903565b60009182526014602052604090912060010155565b600061144a600a5490565b82106114ad5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610903565b600a82815481106114c0576114c061369f565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b0316806107d05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610903565b6001600160a01b0383166115885760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420617070726f766520746f207a65726f206164647265737300006044820152606401610903565b60005b818110156116365760008383838181106115a7576115a761369f565b905060200201359050336001600160a01b03166115c3826114d2565b6001600160a01b0316146116195760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f7420746f6b656e206f776e6572000000000000006044820152606401610903565b611623858261088f565b508061162e81613634565b91505061158b565b50505050565b611644612317565b8281146116875760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b6044820152606401610903565b60005b838110156117f35760008383838181106116a6576116a661369f565b90506020020135905060008686848181106116c3576116c361369f565b90506020020160208101906116d891906133eb565b90506116ec600d546001600160a01b031690565b6001600160a01b03166116fe836114d2565b6001600160a01b0316146117545760405162461bcd60e51b815260206004820152601860248201527f41646d696e206d757374206f776e2074686520746f6b656e00000000000000006044820152606401610903565b611770611769600d546001600160a01b031690565b8284611e6b565b60008281526014602090815260409182902060038101805460ff1916905580546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f7871e154ac114554d9482c2356ea08c8934e9907ad45c33ca7c3677f2b157383910160405180910390a1505080806117eb90613634565b91505061168a565b5050505050565b60006001600160a01b0382166118645760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610903565b506001600160a01b031660009081526005602052604090205490565b611888612317565b6118926000612371565b565b600f543410156118e65760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206c697374696e672066656500000000000000006044820152606401610903565b60405163020604bf60e21b8152600481018390523090819063081812fc90602401602060405180830381865afa158015611924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194891906136c8565b6001600160a01b031614806119be575060405163e985e9c560e01b815233600482015230602482018190529063e985e9c590604401602060405180830381865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be91906136e5565b611a0a5760405162461bcd60e51b815260206004820152601860248201527f4d61726b6574706c616365206e6f7420617070726f76656400000000000000006044820152606401610903565b604051632142170760e11b8152336004820152306024820181905260448201849052906342842e0e90606401600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b5050506000838152601460205260409020546001600160a01b0316159050611ac757600082815260146020526040902080546001600160a01b0319163317815560018082018390553460028301556003909101805460ff19169091179055611b3c565b604080516080810182523381526020808201848152348385019081526001606085018181526000898152601490955295909320935184546001600160a01b0319166001600160a01b0390911617845590519183019190915551600282015590516003909101805460ff19169115159190911790555b6040805182815233602082015283917fb4e5606a376800f822ae7ce93010dddb4ebd38ca6db1bdbc2d0a1de90c9079e4910160405180910390a25050565b6060600380546107e590613543565b6110333383836123c3565b611b9e3383611dec565b611bba5760405162461bcd60e51b8152600401610903906135a6565b61163684848484612491565b60606107d0826124c4565b6000818152601460205260409020546001600160a01b03163314611c285760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610903565b60008181526014602052604090819020600301805460ff1916905551632142170760e11b8152306004820181905233602483015260448201839052906342842e0e90606401600060405180830381600087803b158015611c8757600080fd5b505af11580156117f3573d6000803e3d6000fd5b611ca3612317565b6001600160a01b038116611d085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610903565b611d1181612371565b50565b60006107d0826125e9565b6000818152600460205260409020546001600160a01b0316611d115760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610903565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611db3826114d2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611df8836114d2565b9050806001600160a01b0316846001600160a01b03161480611e3f57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80611e635750836001600160a01b0316611e5884610868565b6001600160a01b0316145b949350505050565b826001600160a01b0316611e7e826114d2565b6001600160a01b031614611ea45760405162461bcd60e51b815260040161090390613702565b6001600160a01b038216611f065760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610903565b611f13838383600161260e565b826001600160a01b0316611f26826114d2565b6001600160a01b031614611f4c5760405162461bcd60e51b815260040161090390613702565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61103382826040518060200160405280600081525061261a565b6000828152600460205260409020546001600160a01b03166120715760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610903565b6000828152600c602052604090206120898282613795565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6127106001600160601b038216111561212f5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610903565b6001600160a01b0382166121855760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610903565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6040805142602082015244918101919091526060810182905260009081906064906080016040516020818303038152906040528051906020012060001c6122169190613855565b90506023811015612243576000838152601560205260408120805460ff19166001835b0217905550612300565b603c81101561226b57600083815260156020526040902080546001919060ff19168280612239565b605081101561229457600083815260156020526040902080546002919060ff1916600183612239565b605a8110156122bd57600083815260156020526040902080546003919060ff1916600183612239565b60618110156122e657600083815260156020526040902080546004919060ff1916600183612239565b6000838152601560205260409020805460ff191660051790555b505060009081526015602052604090205460ff1690565b600d546001600160a01b031633146118925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610903565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036124245760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610903565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61249c848484611e6b565b6124a88484848461264d565b6116365760405162461bcd60e51b815260040161090390613869565b60606124cf82611d1f565b6000828152600c6020526040812080546124e890613543565b80601f016020809104026020016040519081016040528092919081815260200182805461251490613543565b80156125615780601f1061253657610100808354040283529160200191612561565b820191906000526020600020905b81548152906001019060200180831161254457829003601f168201915b50505050509050600061259c60408051808201909152601581527468747470733a2f2f697066732e696f2f697066732f60581b602082015290565b905080516000036125ae575092915050565b8151156125e05780826040516020016125c89291906138bb565b60405160208183030381529060405292505050919050565b611e638461274e565b60006001600160e01b03198216632483248360e11b14806107d057506107d0826127df565b61163684848484612804565b6126248383612931565b612631600084848461264d565b6109a45760405162461bcd60e51b815260040161090390613869565b60006001600160a01b0384163b1561274357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906126919033908990889088906004016138ea565b6020604051808303816000875af19250505080156126cc575060408051601f3d908101601f191682019092526126c99181019061391d565b60015b612729573d8080156126fa576040519150601f19603f3d011682016040523d82523d6000602084013e6126ff565b606091505b5080516000036127215760405162461bcd60e51b815260040161090390613869565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e63565b506001949350505050565b606061275982611d1f565b600061278d60408051808201909152601581527468747470733a2f2f697066732e696f2f697066732f60581b602082015290565b905060008151116127ad57604051806020016040528060008152506127d8565b806127b784612aca565b6040516020016127c89291906138bb565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b14806107d057506107d082612b5d565b60018111156128735760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610903565b816001600160a01b0385166128cf576128ca81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6128f2565b836001600160a01b0316856001600160a01b0316146128f2576128f28582612b9d565b6001600160a01b03841661290e5761290981612c3a565b6117f3565b846001600160a01b0316846001600160a01b0316146117f3576117f38482612ce9565b6001600160a01b0382166129875760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610903565b6000818152600460205260409020546001600160a01b0316156129ec5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610903565b6129fa60008383600161260e565b6000818152600460205260409020546001600160a01b031615612a5f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610903565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000612ad783612d2d565b600101905060008167ffffffffffffffff811115612af757612af761302c565b6040519080825280601f01601f191660200182016040528015612b21576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612b2b57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480612b8e57506001600160e01b03198216635b5e139f60e01b145b806107d057506107d082612e05565b60006001612baa846117fa565b612bb49190613593565b600083815260096020526040902054909150808214612c07576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090612c4c90600190613593565b6000838152600b6020526040812054600a8054939450909284908110612c7457612c7461369f565b9060005260206000200154905080600a8381548110612c9557612c9561369f565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480612ccd57612ccd61393a565b6001900381819060005260206000200160009055905550505050565b6000612cf4836117fa565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612d6c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612d98576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612db657662386f26fc10000830492506010015b6305f5e1008310612dce576305f5e100830492506008015b6127108310612de257612710830492506004015b60648310612df4576064830492506002015b600a83106107d05760010192915050565b60006001600160e01b0319821663152a902d60e11b14806107d057506301ffc9a760e01b6001600160e01b03198316146107d0565b6001600160e01b031981168114611d1157600080fd5b600060208284031215612e6257600080fd5b81356127d881612e3a565b60005b83811015612e88578181015183820152602001612e70565b50506000910152565b60008151808452612ea9816020860160208601612e6d565b601f01601f19169290920160200192915050565b6020815260006127d86020830184612e91565b600060208284031215612ee257600080fd5b5035919050565b6001600160a01b0381168114611d1157600080fd5b60008060408385031215612f1157600080fd5b8235612f1c81612ee9565b946020939093013593505050565b600080600080600060808688031215612f4257600080fd5b8535612f4d81612ee9565b94506020860135612f5d81612ee9565b935060408601359250606086013567ffffffffffffffff80821115612f8157600080fd5b818801915088601f830112612f9557600080fd5b813581811115612fa457600080fd5b896020828501011115612fb657600080fd5b9699959850939650602001949392505050565b600080600060608486031215612fde57600080fd5b8335612fe981612ee9565b92506020840135612ff981612ee9565b929592945050506040919091013590565b6000806040838503121561301d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561306b5761306b61302c565b604052919050565b600067ffffffffffffffff83111561308d5761308d61302c565b6130a0601f8401601f1916602001613042565b90508281528383830111156130b457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126130dc57600080fd5b6127d883833560208501613073565b80356001600160601b038116811461310257600080fd5b919050565b60008060006060848603121561311c57600080fd5b833561312781612ee9565b9250602084013567ffffffffffffffff81111561314357600080fd5b61314f868287016130cb565b92505061315e604085016130eb565b90509250925092565b600067ffffffffffffffff8211156131815761318161302c565b5060051b60200190565b600082601f83011261319c57600080fd5b813560206131b16131ac83613167565b613042565b82815260059290921b840181019181810190868411156131d057600080fd5b8286015b848110156131f2576131e5816130eb565b83529183019183016131d4565b509695505050505050565b60008060006060848603121561321257600080fd5b833561321d81612ee9565b925060208481013567ffffffffffffffff8082111561323b57600080fd5b818701915087601f83011261324f57600080fd5b813561325d6131ac82613167565b81815260059190911b8301840190848101908a83111561327c57600080fd5b8585015b838110156132b4578035858111156132985760008081fd5b6132a68d89838a01016130cb565b845250918601918601613280565b509650505060408701359250808311156132cd57600080fd5b50506132db8682870161318b565b9150509250925092565b60008083601f8401126132f757600080fd5b50813567ffffffffffffffff81111561330f57600080fd5b6020830191508360208260051b8501011115610dda57600080fd5b60008060006040848603121561333f57600080fd5b833561334a81612ee9565b9250602084013567ffffffffffffffff81111561336657600080fd5b613372868287016132e5565b9497909650939450505050565b6000806000806040858703121561339557600080fd5b843567ffffffffffffffff808211156133ad57600080fd5b6133b9888389016132e5565b909650945060208701359150808211156133d257600080fd5b506133df878288016132e5565b95989497509550505050565b6000602082840312156133fd57600080fd5b81356127d881612ee9565b8015158114611d1157600080fd5b6000806040838503121561342957600080fd5b823561343481612ee9565b9150602083013561344481613408565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b6006811061348357634e487b7160e01b600052602160045260246000fd5b9052565b602081016107d08284613465565b600080600080608085870312156134ab57600080fd5b84356134b681612ee9565b935060208501356134c681612ee9565b925060408501359150606085013567ffffffffffffffff8111156134e957600080fd5b8501601f810187136134fa57600080fd5b61350987823560208401613073565b91505092959194509250565b6000806040838503121561352857600080fd5b823561353381612ee9565b9150602083013561344481612ee9565b600181811c9082168061355757607f821691505b60208210810361357757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107d0576107d061357d565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b80820281158282048414176107d0576107d061357d565b634e487b7160e01b600052601260045260246000fd5b60008261362f5761362f61360a565b500490565b6000600182016136465761364661357d565b5060010190565b8581526001600160a01b038516602082015260a06040820181905260009061367790830186612e91565b90506001600160601b03841660608301526136956080830184613465565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b808201808211156107d0576107d061357d565b6000602082840312156136da57600080fd5b81516127d881612ee9565b6000602082840312156136f757600080fd5b81516127d881613408565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b601f8211156109a457600081815260208120601f850160051c8101602086101561376e5750805b601f850160051c820191505b8181101561378d5782815560010161377a565b505050505050565b815167ffffffffffffffff8111156137af576137af61302c565b6137c3816137bd8454613543565b84613747565b602080601f8311600181146137f857600084156137e05750858301515b600019600386901b1c1916600185901b17855561378d565b600085815260208120601f198616915b8281101561382757888601518255948401946001909101908401613808565b50858210156138455787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000826138645761386461360a565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600083516138cd818460208801612e6d565b8351908301906138e1818360208801612e6d565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061369590830184612e91565b60006020828403121561392f57600080fd5b81516127d881612e3a565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204661a52cfa330fe05d3df27c633a98097bbff3c9f3d471b6ee9802be86ec020a64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1919,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1916_storage"
      },
      {
        "astId": 1924,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1916_storage)"
      },
      {
        "astId": 253,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 255,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 263,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 267,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 273,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1303,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1307,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1310,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1314,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1704,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 75,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4266,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Counter)2466_storage"
      },
      {
        "astId": 4268,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "listingFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4270,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "userMintFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4274,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_firstPurchase",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4278,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_royaltyRate",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint96)"
      },
      {
        "astId": 4290,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "balance",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4295,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "listings",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(Listing)4287_storage)"
      },
      {
        "astId": 4307,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenRarity",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_enum(Rarity)4302)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Rarity)4302": {
        "encoding": "inplace",
        "label": "enum YourCollectible.Rarity",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(Rarity)4302)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum YourCollectible.Rarity)",
        "numberOfBytes": "32",
        "value": "t_enum(Rarity)4302"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)4287_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)4287_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1916_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1916_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint96)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2466_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2465,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Listing)4287_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Listing",
        "members": [
          {
            "astId": 4280,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4282,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4284,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "listingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4286,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isList",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoyaltyInfo)1916_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1913,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1915,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}